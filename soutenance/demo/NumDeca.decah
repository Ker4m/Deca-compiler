// Grenoble INP - Ensimag, UGA - Projet GL
// Library for class Matrix of Deca, coded in Deca

/*
Storing methods for matrices: 
Possibilities:
    -setIdentity
    -setZeros
    -setOnes
*/
class MatrixSet {

    /*
    @def: Set a matrix to Identity
    @params: A float square matrix
    @set: The given matrix is set to Identity 
    */
    void floatSetIdentity(float[] matrix) {
        int i = 0, j = 0;
        if (matrix.length == matrix.width) {
            while (i < matrix.length) {
                j = 0;
                while (j < matrix.length) {
                    if (i == j) {
                        matrix[i,j] = 1;
                    }
                    else {
                        matrix[i,j] = 0;
                    }
                    j = j + 1;
                }
                i = i + 1;
            }
        }
        else {
            println ("The matrix must be square");
        }
    }

    /*
    @def: Set a matrix to Identity
    @params: An int square matrix
    @set: The given matrix is set to Identity 
    */
    void intSetIdentity(int[] matrix) {
        int i = 0, j = 0;
        if (matrix.length == matrix.width) {
            while (i < matrix.length) {
                j = 0;
                while (j < matrix.length) {
                    if (i == j) {
                        matrix[i,j] = 1;
                    }
                    else {
                        matrix[i,j] = 0;
                    }
                    j = j + 1;
                }
                i = i + 1;
            }
        }
        else {
            println ("The matrix must be square");
        }
    }

    /*
    @def: Set matrix elements to zeros
    @params: A float matrix
    @set: The given matrix is set to Zeros 
    */
    void floatSetZero(float[] matrix) {
        int i = 0, j = 0;
        while (i < matrix.length) {
            j = 0;
            while (j < matrix.width) {
                matrix[i,j] = 0;
                j = j + 1;
            }
            i = i + 1;
        }
    }

    /*
    @def: Set matrix elements to zeros
    @params: An int matrix
    @set: The given matrix is set to Zeros 
    */
    void intSetZero(int[] matrix) {
        int i = 0, j = 0;
        while (i < matrix.length) {
            j = 0;
            while (j < matrix.width) {
                matrix[i,j] = 0;
                j = j + 1;
            }
            i = i + 1;
        }
    }

    /*
    @def: Set matrix elements to ones
    @params: A float matrix
    @set: The given matrix is set to Ones 
    */
    void floatSetOne(float[] matrix) {
        int i = 0, j = 0;
        while (i < matrix.length) {
            j = 0;
            while (j < matrix.width) {
                matrix[i,j] = 1;
                j = j + 1;
            }
            i = i + 1;
        }
    }

    /*
    @def: Set matrix elements to ones
    @params: An int matrix
    @set: The given matrix is set to Ones 
    */
    void intSetOne(int[] matrix) {
        int i = 0, j = 0;
        while (i < matrix.length) {
            j = 0;
            while (j < matrix.width) {
                matrix[i,j] = 1;
                j = j + 1;
            }
            i = i + 1;
        }
    }
}

/*
Operations methods for matrices: 
Possibilities:
    -Sum of two matrices
    -Product of a matrix and a value
    -Product of two matrices
    -Transposition
*/
class MatrixOperations {

    /*
    @def: A sum between two matrices
    @params: Two float matrices with the same sizes
    @set: The left matrix is set to leftMatrix + rightMatrix 
    */
    void floatSum(float[] leftMatrix, float[] rightMatrix) {
        int i = 0, j = 0;
        if (leftMatrix.length == rightMatrix.length && leftMatrix.width == rightMatrix.width) {
            while (i < leftMatrix.length) {
                j = 0;
                while (j < leftMatrix.width) {
                    leftMatrix[i, j] = leftMatrix[i, j] + rightMatrix[i, j];
                    j = j + 1;
                }
                i = i + 1;
            }
        }
        else {
            println ("Error: Incompatible sizes in floatSum");
        }
    }

    /*
    @def: A sum between two matrices
    @params: Two int matrices with the same sizes
    @set: The left matrix is set to leftMatrix + rightMatrix 
    */
    void intSum(int[] leftMatrix, int[] rightMatrix) {
        int i = 0, j = 0;
        if (leftMatrix.length == rightMatrix.length && leftMatrix.width == rightMatrix.width) {
            while (i < leftMatrix.length) {
                j = 0;
                while (j < leftMatrix.width) {
                    leftMatrix[i, j] = leftMatrix[i, j] + rightMatrix[i, j];
                    j = j + 1;
                }
                i = i + 1;
            }
        }
        else {
            println ("Error: Incompatible sizes in intSum");
        }
    }

    /*
    @def: A product between two matrices
    @params: Two float matrices with compatible sizes
    @set: The left matrix is set to leftMatrix x rightMatrix 
    */
    void floatMult(float[] leftMatrix, float[] rightMatrix, float[] returnMatrix) {
        int i = 0, j = 0, k = 0;
        MatrixSet mS = new MatrixSet();
        if (
            (leftMatrix.width != rightMatrix.length) || 
            (leftMatrix.length != returnMatrix.length) || 
            (returnMatrix.width != rightMatrix.width)
        ) {
            println("Error: Incompatible sizes in floatMult");
        } else {
            mS.floatSetZero(returnMatrix);
            i = 0;
            j = 0;
            k = 0;
            while (i < leftMatrix.length) {
                j = 0;
                while (j < rightMatrix.width) {
                    k = 0;
                    while (k < leftMatrix.width) {
                        returnMatrix[i, j] = returnMatrix[i, j] + leftMatrix[i, k] * rightMatrix[k, j];
                        k = k + 1;
                    }
                    j = j + 1;
                }
                i = i + 1;
            }
        }
    }

    /*
    @def: A product between two matrices
    @params: Two int matrices with compatible sizes
    @set: The left matrix is set to leftMatrix x rightMatrix 
    */
    void intMult(int[] leftMatrix, int[] rightMatrix, int[] returnMatrix) {
        int i = 0, j = 0, k = 0;
        MatrixSet mS = new MatrixSet();
        if (
            (leftMatrix.width != rightMatrix.length) || 
            (leftMatrix.length != returnMatrix.length) || 
            (returnMatrix.width != rightMatrix.width)
        ) {
            println("Error: Incompatible sizes in intMult");
        } else {
            mS.intSetZero(returnMatrix);
            i = 0;
            j = 0;
            k = 0;
            while (i < leftMatrix.length) {
                j = 0;
                while (j < rightMatrix.width) {
                    k = 0;
                    while (k < leftMatrix.width) {
                        returnMatrix[i, j] = returnMatrix[i, j] + leftMatrix[i, k] * rightMatrix[k, j];
                        k = k + 1;
                    }
                    j = j + 1;
                }
                i = i + 1;
            }
        }
    }

    /*
    @def: A product of a float with a matrix
    @params: A float matrix and a float
    @set: The left matrix is set to const x leftMatrix 
    */
    void floatMultConst(float[] matrix, float const) {
        float[matrix.length, matrix.width] matrixMult;
        int i = 0, j = 0;
        while (i < matrix.length) {
            j = 0;
            while (j < matrix.width) {
                matrix[i, j] = matrix[i, j] * const;
                j = j + 1;
            }
            i = i + 1;
        }
    }

    /*
    @def: A product of an int with a matrix
    @params: An int matrix and an int
    @set: The left matrix is set to const x leftMatrix 
    */
    void intMultConst(int[] matrix, int const) {
        int[matrix.length, matrix.width] matrixMult;
        int i = 0, j = 0;
        while (i < matrix.length) {
            j = 0;
            while (j < matrix.width) {
                matrix[i, j] = matrix[i, j] * const;
                j = j + 1;
            }
            i = i + 1;
        }
    }

    /*
    @def: A transposition of a matrix
    @params: A float matrix and a returned float matrix
    @set: The returned matrix is set to Transpose(inputMatrix)
    */
    void floatTranspose(float[] inputMatrix, float[] returnMatrix) {
        int i = 0, j = 0;
        if ((inputMatrix.length != returnMatrix.width) || (inputMatrix.width != returnMatrix.length)) {
            println("Error: Incompatible sizes in floatTranspose");
        } else {
            while (i < inputMatrix.width) {
                j = 0;
                while (j < inputMatrix.length) {
                    returnMatrix[i, j] = inputMatrix[j, i];
                    j = j + 1;
                }
                i = i + 1;
            }
        }
    }

    /*
    @def: A transposition of a matrix
    @params: An int matrix and a returned int matrix
    @set: The returned matrix is set to Transpose(inputMatrix)
    */
    void intTranspose(int[] inputMatrix, int[] returnMatrix) {
        int i = 0, j = 0;
        if ((inputMatrix.length != returnMatrix.width) || (inputMatrix.width != returnMatrix.length)) {
            println("Error: Incompatible sizes in intTranspose");
        } else {
            while (i < inputMatrix.width) {
                j = 0;
                while (j < inputMatrix.length) {
                    returnMatrix[i, j] = inputMatrix[j, i];
                    j = j + 1;
                }
                i = i + 1;
            }
        }
    }

}

/*
Useful methods for matrices: 
Possibilities:
    -Print
    -Equal
    -Copy
    -Int to float conversion
*/
class MatrixUtils {

    /*
    @def: A print method for a matrix
    @params: A float matrix 
    */
    void floatMatrixPrint(float[] matrix){
        int i = 0, j = 0;
        println("[");
        while (i < matrix.length){
            j = 0;
            while (j < matrix.width){
                print(matrix[i,j], " ");
                j = j + 1;
            }
            println("");
            i = i + 1;
        }
        println("]");
    }

    /*
    @def: A print method for a matrix
    @params: An int matrix 
    */
    void intMatrixPrint(int[] matrix){
        int i = 0, j = 0;
        println("[");
        while (i < matrix.length){
            j = 0;
            while (j < matrix.width){
                print(matrix[i,j], " ");
                j = j + 1;
            }
            println("");
            i = i + 1;
        }
        println("]");
    }

    /*
    @def: An equal method for a matrix
    @params: Two float matrices
    @return: The result of the test leftMatrix == rightMatrix as a boolean
    */
    boolean floatMatrixEqual(float[] matrix, float[] matrix2) {
        int i = 0, j = 0;
        if (matrix.length != matrix2.width || matrix.width != matrix2.length) {
            return false;
        }
        while (i < matrix.length){
            j = 0;
            while (j < matrix.width){
                if (matrix[i,j] != matrix2[i,j]){
                    return false;
                }
                j = j + 1;
            }
            i = i + 1;
        }
        return true;
    }

    /*
    @def: An equal method for a matrix
    @params: Two int matrices
    @return: The result of the test leftMatrix == rightMatrix as a boolean
    */
    boolean intMatrixEqual(int[] matrix, int[] matrix2) {
        int i = 0, j = 0;
        if (matrix.length != matrix2.width || matrix.width != matrix2.length) {
            return false;
        }
        while (i < matrix.length){
            j = 0;
            while (j < matrix.width){
                if (matrix[i,j] != matrix2[i,j]){
                    return false;
                }
                j = j + 1;
            }
            i = i + 1;
        }
        return true;
    }

    /*
    @def: An copy method for a matrix
    @params: Two float matrices
    @set: returnMatrix returns a copy of inputMatrix
    */
    void floatMatrixCopy(float[] inputMatrix, float[] returnMatrix) {
        int i = 0, j = 0;
        if ((inputMatrix.length != returnMatrix.length) || (inputMatrix.width != returnMatrix.width)) {
            println("Error: Incompatible sizes in floatMatrixCopy");
        } else {
            while (i < inputMatrix.length) {
                j = 0;
                while (j < inputMatrix.width) {
                    returnMatrix[i,j] = inputMatrix[i,j];
                    j = j + 1;
                }
                i = i + 1;
            }
        }
    }

    /*
    @def: An copy method for a matrix
    @params: Two int matrices
    @set: returnMatrix returns a copy of inputMatrix
    */
    void intMatrixCopy(int[] inputMatrix, int[] returnMatrix) {
        int i = 0, j = 0;
        if ((inputMatrix.length != returnMatrix.length) || (inputMatrix.width != returnMatrix.width)) {
            println("Error: Incompatible sizes in intMatrixCopy");
        } else {
            while (i < inputMatrix.length) {
                j = 0;
                while (j < inputMatrix.width) {
                    returnMatrix[i,j] = inputMatrix[i,j];
                    j = j + 1;
                }
                i = i + 1;
            }
        }
    }

    /*
    @def: An int to float conversion method for a matrix
    @params: An int matrix and a float matrix
    @set: returnMatrix returns float version of inputMatrix
    */
    void intToFloat(int[] inputMatrix, float[] returnMatrix){
        int i = 0, j = 0;
        if ((inputMatrix.length != returnMatrix.length) || (inputMatrix.width != returnMatrix.width)) {
            println("Error: Incompatible sizes in intToFloat");
        } else {
            while (i < inputMatrix.length){
                j = 0;
                while (j < inputMatrix.width){
                    returnMatrix[i,j] = inputMatrix[i,j];
                    j = j + 1;
                }
                i = i + 1;
            }
        }
    }
}

// End of Deca Matrix library