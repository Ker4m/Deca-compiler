parser grammar DecaParser;

options {
    // Default language but name it anyway
    //
    language  = Java;

    // Use a superclass to implement all helper
    // methods, instance variables and overrides
    // of ANTLR default methods, such as error
    // handling.
    //
    superClass = AbstractDecaParser;

    // Use the vocabulary generated by the accompanying
    // lexer. Maven knows how to work out the relationship
    // between the lexer and parser and will build the
    // lexer before the parser. It will also rebuild the
    // parser if the lexer changes.
    //
    tokenVocab = DecaLexer;

}

// which packages should be imported?
@header {
    import fr.ensimag.deca.tree.*;
    import java.io.PrintStream;
    import fr.ensimag.deca.tools.SymbolTable;
}

@members {
    SymbolTable symbols = new SymbolTable();
    @Override
    protected AbstractProgram parseProgram() {
        return prog().tree;
    }
}

prog returns[AbstractProgram tree]
    : list_classes main EOF {
            assert($list_classes.tree != null);
            assert($main.tree != null);
            $tree = new Program($list_classes.tree, $main.tree);
            setLocation($tree, $list_classes.start);
        }
    ;

main returns[AbstractMain tree]
    : /* epsilon */ {
            $tree = new EmptyMain();
        }
    | block {
            assert($block.decls != null);
            assert($block.insts != null);
            $tree = new Main($block.decls, $block.insts);
            setLocation($tree, $block.start);
        }
    ;

block returns[ListDeclVar decls, ListInst insts]
    : OBRACE list_decl list_inst CBRACE {
            assert($list_decl.tree != null);
            assert($list_inst.tree != null);
            $decls = $list_decl.tree;
            $insts = $list_inst.tree;
        }
    ;

list_decl returns[ListDeclVar tree]
@init   {
            $tree = new ListDeclVar();
        }
    : decl_var_set[$tree]*
    ;

decl_var_set[ListDeclVar l]
    : type list_decl_var[$l,$type.tree] SEMI
    | matrix_type list_decl_matrix[$l,$matrix_type.tree] SEMI
    ;

list_decl_var[ListDeclVar l, AbstractIdentifier t]
    : dv1=decl_var[$t] {
        $l.add($dv1.tree);
        } (COMMA dv2=decl_var[$t] {
            $l.add($dv2.tree);
        }
      )*
    ;

list_decl_matrix[ListDeclVar l, AbstractIdentifier t]
    : dv1=decl_matrix[$t] {
            $l.add($dv1.tree);
            } (COMMA dv2=decl_matrix[$t] {
                $l.add($dv2.tree);
            }
          )*
        ;

decl_var[AbstractIdentifier t] returns[AbstractDeclVar tree]
@init   {
            Initialization initialization;

            boolean isInitialize = false;
        }
    : i=ident {
            assert($i.tree != null);
        }
      (EQUALS e=expr {
            assert($e.tree != null);
            initialization = new Initialization($e.tree);
            setLocation(initialization, $e.start);
            $tree = new DeclVar(t, $i.tree, initialization);
            isInitialize = true;
        }
      )?
        {
            if (!isInitialize) $tree = new DeclVar(t, $i.tree, new NoInitialization());
        }
        {
            setLocation($tree, $i.start);
        }
    ;

decl_matrix[AbstractIdentifier t] returns[AbstractDeclVar tree]
    : OBRACKET size=list_expr CBRACKET name=ident {
        assert($name.tree != null);
        assert($size.tree != null);
        $tree = new DeclMatrix(t, $size.tree, $name.tree, new NoInitialization());
        setLocation($tree, $name.start);
    }
    ;

list_inst returns[ListInst tree]
@init {
    $tree = new ListInst();
}
    : (inst {
        assert($inst.tree != null);
        $tree.add($inst.tree);
        }
      )*
    ;

inst returns[AbstractInst tree]
    : e1=expr SEMI {
            assert($e1.tree != null);
            $tree = $e1.tree;
        }
    | SEMI {
            $tree = new NoOperation();
            setLocation($tree, $SEMI);
        }
    | PRINT OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Print(false, $list_expr.tree);
            setLocation($tree, $PRINT);
        }
    | PRINTLN OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Println(false, $list_expr.tree);
            setLocation($tree, $PRINTLN);
        }
    | PRINTX OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Print(true, $list_expr.tree);
            setLocation($tree, $PRINTX);
        }
    | PRINTLNX OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Println(true, $list_expr.tree);
            setLocation($tree, $PRINTLNX);
        }
    | if_then_else {
            assert($if_then_else.tree != null);
            $tree = $if_then_else.tree;
        }
    | WHILE OPARENT condition=expr CPARENT OBRACE body=list_inst CBRACE {
            assert($condition.tree != null);
            assert($body.tree != null);
            $tree = new While($condition.tree, $body.tree);
            setLocation($tree, $WHILE);
        }
    | RETURN expr SEMI {
            assert($expr.tree != null);
            $tree = new Return($expr.tree);
            setLocation($tree, $RETURN);
        }
    | FOR OPARENT elementType=type element=ident COL obj=primary_expr CPARENT OBRACE body=list_inst CBRACE {
            assert($elementType.tree != null);
            assert($element.tree != null);
            assert($obj.tree != null);
            assert($body.tree != null);
            $tree = new For($elementType.tree, $element.tree, $obj.tree, $body.tree);
            setLocation($tree, $FOR);    
        }
    ;

if_then_else returns[IfThenElse tree]
@init {
    IfThenElse tempTree;
    ListInst elseBranch = new ListInst();
    ListInst elsifElseBranch = new ListInst();
}
    : if1=IF OPARENT condition=expr CPARENT OBRACE li_if=list_inst CBRACE {
        assert($condition.tree != null);
        assert($li_if.tree != null);

        $tree = new IfThenElse($condition.tree, $li_if.tree, elseBranch);
        setLocation($tree, $if1);

        tempTree = $tree;
        }
      (ELSE elsif=IF OPARENT elsif_cond=expr CPARENT OBRACE elsif_li=list_inst CBRACE {
        assert($elsif_cond.tree != null);
        assert($elsif_li.tree != null);

        tempTree = new IfThenElse($elsif_cond.tree, $elsif_li.tree, elsifElseBranch);
        setLocation(tempTree, $elsif);

        elseBranch.add(tempTree);
        elseBranch = elsifElseBranch;
        }
      )*
      (ELSE OBRACE li_else=list_inst CBRACE {
        assert($li_else.tree != null);

        tempTree.setElseBranch($li_else.tree);
        }
      )?
    ;

list_expr returns[ListExpr tree]
@init   {
    $tree = new ListExpr();
}
    : (e1=expr {
            assert($e1.tree != null);
            $tree.add($e1.tree);
        }
       (COMMA e2=expr {
            assert($e2.tree != null);
            $tree.add($e2.tree);
        }
       )* )?
    ;

expr returns[AbstractExpr tree]
    : assign_expr {
            assert($assign_expr.tree != null);
            $tree = $assign_expr.tree;
        }
    ;

assign_expr returns[AbstractExpr tree]
    : e=or_expr (
        /* condition: expression e must be a "LVALUE" */ {
            if (! ($e.tree instanceof AbstractLValue)) {
                throw new InvalidLValue(this, $ctx);
            }
        }
        EQUALS e2=assign_expr {
            assert($e.tree != null);
            assert($e2.tree != null);
            $tree = new Assign((AbstractLValue) $e.tree, $e2.tree);
            setLocation($tree, $EQUALS);
        }
      | /* epsilon */ {
            assert($e.tree != null);
            $tree = $e.tree;
        }
      )
    ;

or_expr returns[AbstractExpr tree]
    : e=and_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=or_expr OR e2=and_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Or($e1.tree, $e2.tree);
            setLocation($tree, $OR);
       }
    ;

and_expr returns[AbstractExpr tree]
    : e=eq_neq_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    |  e1=and_expr AND e2=eq_neq_expr {
            assert($e1.tree != null);                         
            assert($e2.tree != null);
            $tree = new And($e1.tree, $e2.tree);
            setLocation($tree, $AND);
        }
    ;

eq_neq_expr returns[AbstractExpr tree]
    : e=inequality_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=eq_neq_expr EQEQ e2=inequality_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Equals($e1.tree, $e2.tree);
            setLocation($tree, $EQEQ);
        }
    | e1=eq_neq_expr NEQ e2=inequality_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new NotEquals($e1.tree, $e2.tree);
            setLocation($tree, $NEQ);
        }
    ;

inequality_expr returns[AbstractExpr tree]
    : e=sum_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=inequality_expr LEQ e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new LowerOrEqual($e1.tree, $e2.tree);
            setLocation($tree, $LEQ);
        }
    | e1=inequality_expr GEQ e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new GreaterOrEqual($e1.tree, $e2.tree);
            setLocation($tree, $GEQ);
        }
    | e1=inequality_expr GT e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Greater($e1.tree, $e2.tree);
            setLocation($tree, $GT);
        }
    | e1=inequality_expr LT e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Lower($e1.tree, $e2.tree);
            setLocation($tree, $LT);
        }
    | e1=inequality_expr INSTANCEOF type {
            assert($e1.tree != null);
            assert($type.tree != null);
            $tree = new InstanceOf($e1.tree, $type.tree);
            setLocation($tree, $e1.start);
        }
    ;


sum_expr returns[AbstractExpr tree]
    : e=mult_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=sum_expr PLUS e2=mult_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Plus($e1.tree, $e2.tree);
            setLocation($tree, $PLUS);
        }
    | e1=sum_expr MINUS e2=mult_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Minus($e1.tree, $e2.tree);
            setLocation($tree, $MINUS);
        }
    ;

mult_expr returns[AbstractExpr tree]
    : e=unary_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=mult_expr TIMES e2=unary_expr {
            assert($e1.tree != null);                                         
            assert($e2.tree != null);
            $tree = new Multiply($e1.tree, $e2.tree);
            setLocation($tree, $TIMES);
        }
    | e1=mult_expr SLASH e2=unary_expr {
            assert($e1.tree != null);                                         
            assert($e2.tree != null);
            $tree = new Divide($e1.tree, $e2.tree);
            setLocation($tree, $SLASH);
        }
    | e1=mult_expr PERCENT e2=unary_expr {
            assert($e1.tree != null);                                                                          
            assert($e2.tree != null);
            $tree = new Modulo($e1.tree, $e2.tree);
            setLocation($tree, $PERCENT);
        }
    ;

unary_expr returns[AbstractExpr tree]
    : op=MINUS e=unary_expr {
            assert($e.tree != null);
            $tree = new UnaryMinus($e.tree);
            setLocation($tree, $op);
        }
    | op=EXCLAM e=unary_expr {
            assert($e.tree != null);
            $tree = new Not($e.tree);
            setLocation($tree, $op);
        }
    | select_expr {
            assert($select_expr.tree != null);
            $tree = $select_expr.tree;
        }
    ;

select_expr returns[AbstractExpr tree]
    : e=primary_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=select_expr DOT i=ident {
            assert($e1.tree != null);
            assert($i.tree != null);
        }
        (o=OPARENT args=list_expr CPARENT {
            // we matched "e1.i(args)"
            assert($args.tree != null);
            $tree = new MethodCall($i.tree, $args.tree, $e1.tree);
            setLocation($tree, $e1.start);
        }
        | /* epsilon */ {
            // we matched "e.i"
            $tree = new DotIdentifier($e1.tree, $i.tree);
            setLocation($tree, $e1.start);
        }
        )
    ;

primary_expr returns[AbstractExpr tree]
    : ident {
            assert($ident.tree != null);
            $tree = $ident.tree;
        }
    | m=ident OPARENT args=list_expr CPARENT {
            assert($args.tree != null);
            assert($m.tree != null);
            $tree = new MethodCall($m.tree, $args.tree, null);
            setLocation($tree, $m.start);
        }
    | m=ident OBRACKET args=list_expr CBRACKET {
            assert($args.tree != null);
            assert($m.tree != null);
            $tree = new MatrixCall($m.tree, $args.tree);
            setLocation($tree, $m.start);
        }
    | OPARENT expr CPARENT {
            assert($expr.tree != null);
            $tree = $expr.tree;
        }
    | READINT OPARENT CPARENT {
            $tree = new ReadInt();
            setLocation($tree, $READINT);
        }
    | READFLOAT OPARENT CPARENT {
            $tree = new ReadFloat();
            setLocation($tree, $READFLOAT);
        }
    | NEW ident OPARENT CPARENT {
            assert($ident.tree != null);
            $tree = new New($ident.tree);
            setLocation($tree, $NEW);
        }
    | cast=OPARENT type CPARENT OPARENT expr CPARENT {
            assert($type.tree != null);
            assert($expr.tree != null);
            $tree = new Cast($expr.tree, $type.tree);
            setLocation($tree, $cast);
        }
    | literal {
            assert($literal.tree != null);
            $tree = $literal.tree;
        }
    ;

type returns[AbstractIdentifier tree]
    : ident {
            assert($ident.tree != null);
            $tree = $ident.tree;
        }
    ;

matrix_type returns[AbstractIdentifier tree]
    : matrix_ident {
            assert($matrix_ident.tree != null);
            $tree = $matrix_ident.tree;
        }
    ;

literal returns[AbstractExpr tree]
    : INT {
        try {
            $tree = new IntLiteral(Integer.parseInt($INT.text));
            setLocation($tree, $INT);
        } catch (NumberFormatException e) {
            throw new IntTooLarge(this, $ctx);
        }
        }
    | fd=FLOAT {
        try {
            $tree = new FloatLiteral(Float.parseFloat($fd.text));
            setLocation($tree, $fd);
        } catch (IllegalArgumentException e) {
            throw new FloatTooLarge(this, $ctx);
        }
        }
    | STRING {
        String input = $STRING.text.substring(1,$STRING.text.length()-1);
        for (int i = 0; i < input.length() - 1; i++) {
            if ((input.charAt(i) == '\\') && (input.charAt(i + 1) == '\"')) {
                input = input.substring(0, i) + input.substring(i+1);
            }
        }
        $tree = new StringLiteral(input);
        setLocation($tree, $STRING);
        }
    | TRUE {
        $tree = new BooleanLiteral(true);
        setLocation($tree, $TRUE);
        }
    | FALSE {
        $tree = new BooleanLiteral(false);
        setLocation($tree, $FALSE);
        }
    | THIS {
        $tree = new This();
        setLocation($tree, $THIS);
        }
    | NULL {
        $tree = new Null();
        setLocation($tree, $NULL);
        }
    ;

ident returns[AbstractIdentifier tree]
    : IDENT {
        $tree = new Identifier(symbols.create($IDENT.text));
        setLocation($tree, $IDENT);
        }
    ;

matrix_ident returns[AbstractIdentifier tree]
    : IDENT {
        $tree = new Identifier(symbols.create($IDENT.text + "[]"));
        setLocation($tree, $IDENT);
        }
    ;

/****     Class related rules     ****/

list_classes returns[ListDeclClass tree]
    @init {
        $tree = new ListDeclClass();
    }
    :
      (c1=class_decl {
          assert($c1.tree != null);
          $tree.add($c1.tree);
        }
      )*
    ;

class_decl returns[DeclClass tree]
    : CLASS name=ident superclass=class_extension[$CLASS] OBRACE class_body CBRACE {
        assert($name.tree != null);
        assert($superclass.tree != null);
        assert($class_body.methods != null);
        assert($class_body.fields != null);

        $tree = new DeclClass($name.tree, $superclass.tree, $class_body.methods, $class_body.fields);
        setLocation($tree, $CLASS);
        }
    ;

class_extension[Token _class] returns[AbstractIdentifier tree]
    : EXTENDS ident {
        assert($ident.tree != null);
        $tree = $ident.tree;
        }
    | /* epsilon */ {
        $tree = new Identifier(symbols.create("Object"));
        setLocation($tree, $_class);
        }
    ;

class_body returns[ListDeclMethod methods, ListDeclField fields]
@init {
    $methods = new ListDeclMethod();
    $fields = new ListDeclField();
}
    : (m=decl_method {
        assert($m.tree != null);
        $methods.add($m.tree);
    }
      | decl_field_set[$fields]
      )*
    ;

decl_field_set[ListDeclField fields]
    : v=visibility t=type list_decl_field[$fields, $v.tree, $t.tree]
      SEMI
    | v=visibility matrix_type list_decl_matrix_field[$fields, $v.tree, $matrix_type.tree] SEMI
    ;

list_decl_matrix_field[ListDeclField l, Visibility v, AbstractIdentifier t]
    : dv1=decl_matrix_field[$t, $v] {
            $l.add($dv1.tree);
            } (COMMA dv2=decl_matrix_field[$t, $v] {
                $l.add($dv2.tree);
            }
          )*
        ;

decl_matrix_field[AbstractIdentifier t, Visibility v] returns[AbstractDeclField tree]
    : OBRACKET size=list_expr CBRACKET name=ident {
        assert($name.tree != null);
        assert($size.tree != null);
        $tree = new DeclMatrixField(t, $size.tree, $name.tree, new NoInitialization(), $v);
        setLocation($tree, $name.start);
    }
    ;

visibility returns[Visibility tree]
    : /* epsilon */ {
        $tree = Visibility.PUBLIC;
        }
    | PROTECTED {
        $tree = Visibility.PROTECTED;
        }
    ;

list_decl_field[ListDeclField fields, Visibility _v, AbstractIdentifier _type]
    : dv1=decl_field[$_v, $_type] {
        fields.add($dv1.tree);
    }
        (COMMA dv2=decl_field[$_v, $_type] {
            fields.add($dv2.tree);
        }
      )*
    ;

decl_field[Visibility _v, AbstractIdentifier _type] returns [AbstractDeclField tree]
    : i=ident {
            Initialization initialization;

            boolean isInitialize = false;
        
        }
      (EQUALS e=expr {
            assert($e.tree != null);
            initialization = new Initialization($e.tree);
            setLocation(initialization, $e.start);
            $tree = new DeclField($_v, $_type, $i.tree, initialization);
            isInitialize = true;
        }
      )? 
      {
          if (!isInitialize) $tree = new DeclField($_v, $_type, $i.tree, new NoInitialization());
      }
      {
          setLocation($tree, $i.start);
      }
    ;

decl_method returns [AbstractDeclMethod tree]
@init {
    AbstractMethodBody methodBody;
}
    : type ident OPARENT params=list_params CPARENT (block {
        assert($block.decls != null);
        assert($block.insts != null);
        methodBody = new MethodBody($block.decls, $block.insts);
        setLocation(methodBody, $block.start);
        }
      | ASM OPARENT code=multi_line_string CPARENT SEMI {
          String _codeString = $code.text.substring(1,$code.text.length()-1);
        for (int i = 0; i < _codeString.length() - 1; i++) {
            if ((_codeString.charAt(i) == '\\') && (_codeString.charAt(i + 1) == '\"')) {
                _codeString = _codeString.substring(0, i) + _codeString.substring(i+1);
            }
        }
        StringLiteral _code = new StringLiteral(_codeString);
        methodBody = new AsmMethodBody(_code);
        methodBody.setLocation($code.location);
        }
      ) {
            assert($type.tree != null);
            assert($ident.tree != null);
            assert($params.tree != null);
            $tree = new DeclMethod($type.tree, $ident.tree, $params.tree, methodBody);
            setLocation($tree, $type.start);
        }
    ;

list_params returns [ListDeclParam tree]
@init {
    $tree = new ListDeclParam();
}
    : (p1=param {
        assert($p1.tree != null);
        $tree.add($p1.tree);
    } (COMMA p2=param {
        assert($p2.tree != null);
        $tree.add($p2.tree);
        }
      )*)?
    ;
    
multi_line_string returns[String text, Location location]
    : s=STRING {
            $text = $s.text;
            $location = tokenLocation($s);
        }
    | s=MULTI_LINE_STRING {
            $text = $s.text;
            $location = tokenLocation($s);
        }
    ;

param returns [AbstractDeclParam tree]
    : type ident {
        $tree = new DeclParam($type.tree, $ident.tree);
        setLocation($tree, $type.start);
        }
    ;
